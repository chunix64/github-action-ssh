name: Ubuntu Linux SSH

on:
  workflow_dispatch:
    inputs:
      SSH_MAX_TIME:
        description: 'SSH session max duration (1‚Äì6 hrs)'
        required: true
        default: 2
        type: choice
        options:
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
      NGROK_AUTH_TOKEN:
        description: 'ngrok API auth token'
        required: true
        default: ''
      SWAP_SIZE:
        description: 'add Swap/virtual RAM in GBs'
        required: false
        default: 16
      START_MINISERVE:
        description: 'Enable miniserve HTTP file server'
        type: boolean
        default: true
      START_CLEAN_UP:
        description: 'Run disk cleanup (~27GB‚Üí68GB free, ~4min)'
        type: boolean
        default: true

jobs:
  github-ssh:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare variables
        env:
          NGROK_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        run: |
          NGROK_AUTH_TOKEN=$(jq -r '.inputs.NGROK_AUTH_TOKEN' $GITHUB_EVENT_PATH)
          echo ::add-mask::$NGROK_AUTH_TOKEN
          if [ -n "$NGROK_AUTH_TOKEN" ]; then
            NGROK_TOKEN="$NGROK_AUTH_TOKEN"
          fi
          echo NGROK_TOKEN=$NGROK_TOKEN >> $GITHUB_ENV

      - name: Clean-up
        if: ${{ github.event.inputs.START_CLEAN_UP == 'true' }}
        uses: rokibhasansagar/slimhub_actions@main

      - name: Swap Setup
        if: ${{ github.event.inputs.START_SWAP_SPACE >= 0 }}
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: ${{ github.event.inputs.SWAP_SIZE }}

      - name: Install ngrok
        run: |
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt update && sudo apt install -y ngrok

      - name: Install cloudflared
        run: |
          sudo mkdir -p --mode=0755 /usr/share/keyrings
          curl -fsSL https://pkg.cloudflare.com/cloudflare-main.gpg | sudo tee /usr/share/keyrings/cloudflare-main.gpg >/dev/null
          echo 'deb [signed-by=/usr/share/keyrings/cloudflare-main.gpg] https://pkg.cloudflare.com/cloudflared noble main' | sudo tee /etc/apt/sources.list.d/cloudflared.list
          sudo apt update && sudo apt install -y cloudflared

      - name: Setup SSH server
        run: |
          sudo apt update
          sudo apt install -y openssh-server
          sudo mkdir -p /var/run/sshd
          sudo useradd -m -s /bin/bash debuguser
          echo "debuguser:password" | sudo chpasswd
          sudo mkdir -p /home/debuguser/.ssh
          echo "${{ secrets.SSH_PUBLIC_KEY }}" | sudo tee /home/debuguser/.ssh/authorized_keys
          sudo chown -R debuguser:debuguser /home/debuguser/.ssh
          sudo chmod 600 /home/debuguser/.ssh/authorized_keys
          echo "debuguser ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/debuguser
          sudo service ssh start

      - name: Start miniserve
        if: ${{ github.event.inputs.START_MINISERVE == 'true' }}
        run: |
          wget -q -nc https://github.com/svenstaro/miniserve/releases/download/v0.31.0/miniserve-0.31.0-x86_64-unknown-linux-gnu
          chmod +x ./miniserve-0.31.0-x86_64-unknown-linux-gnu
          nohup sudo ./miniserve-0.31.0-x86_64-unknown-linux-gnu / --hidden --port 80 --directory-size --upload-files &

      - name: Start cloudflared
        run: |
          mkdir -p /tmp/logs/cloudflared/
          nohup cloudflared tunnel --url http://localhost:80 2> /tmp/logs/cloudflared/miniserve.log &
          nohup cloudflared tunnel --url ssh://localhost:22 2> /tmp/logs/cloudflared/ssh.log &
          sleep 5

          cloudflared_miniserve_url=$(grep -m1 -oE "https?://[a-zA-Z0-9.-]+\.trycloudflare\.com" /tmp/logs/cloudflared/miniserve.log)
          cloudflared_ssh_url=$(grep -m1 -oE "https?://[a-zA-Z0-9.-]+\.trycloudflare\.com" /tmp/logs/cloudflared/ssh.log)
          cloudflared_ssh_host=$(echo "$cloudflared_ssh_url" | sed -E 's#https?://##')

          echo "üåê Miniserve available at: $cloudflared_miniserve_url"
          echo "üîë Connect with: ssh -o ProxyCommand=\"cloudflared access ssh --hostname %h\" debuguser@$cloudflared_ssh_host"
          echo "üîë Connect with: sshpass -p 'password' ssh -o StrictHostKeyChecking=no -o ProxyCommand=\"cloudflared access ssh --hostname %h\" debuguser@$cloudflared_ssh_host"
          echo "üîë Default password: password"
          echo "TUNNEL: $cloudflared_ssh_url"


      - name: Start ngrok
        run: |
          chmod +x gen_ngrok_config.sh
          ./gen_ngrok_config.sh "$NGROK_TOKEN"
          nohup ngrok start --all --config=./ngrok.yml &>/dev/null &
          sleep 5
          
          ngrok_ssh_url=$(curl -s localhost:4040/api/tunnels | jq -r '.tunnels[] | select(.name=="ssh_server") | .public_url')  
          ngrok_miniserve_url=$(curl -s localhost:4040/api/tunnels | jq -r '.tunnels[] | select(.name=="miniserve" and .proto=="https") | .public_url')
          ngrok_host=$(echo "$ngrok_ssh_url" | sed -E 's#^tcp://([^:]+):.*#\1#')
          ngrok_port=$(echo "$ngrok_ssh_url" | sed -E 's#^tcp://[^:]+:(.*)$#\1#')
          
          echo "üåê Miniserve available at: $ngrok_miniserve_url"
          echo "üîë Connect with: ssh debuguser@$ngrok_host -p $ngrok_port"
          echo "üîë Connect with: sshpass -p 'password' ssh -o StrictHostKeyChecking=no debuguser@$ngrok_host -p $ngrok_port"
          echo "üîë Default password: password"
          echo "TUNNEL: $ngrok_ssh_url"

      - name: Keep session alive
        run: |
          trap '' SIGINT SIGTERM
          HOURS=${{ github.event.inputs.SSH_MAX_TIME }}
          SECONDS=$((HOURS * 3600))
          echo "‚è≥ Keeping SSH session alive for $HOURS hour(s) ($SECONDS seconds)"
          sleep "$SECONDS" || true
